#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <stdbool.h>

// Spielmodi Enumeration
typedef enum {
    NORMAL = 1,
    ZEIT = 2,
    ENDLOS = 3,
    MULTIPLAYER = 4
} Spielmodus;

// Struktur für Spielstatistiken
typedef struct {
    int versuche;
    int gewonneneSpiele;
    int verloreneSpiele;
    int highscore;
} Statistik;

// Funktionsprototypen
void spieleInitialisieren(void);
void spieleRunde(Statistik *stats, Spielmodus modus);
void zeigeStatistik(const Statistik *stats);
int holeBenutzereingabe(void);
void zeigeMenu(void);
void zeigeSpielmodi(void);
void spieleNormalModus(Statistik *stats);
void spieleZeitModus(Statistik *stats);
void spieleEndlosModus(Statistik *stats);
void spieleMultiplayerModus(Statistik *stats);
time_t getZeitInSekunden(void);

int main() {
    Statistik spielerStats = {0, 0, 0, 0};
    char auswahl;
    Spielmodus modus;
    
    spieleInitialisieren();
    
    do {
        zeigeMenu();
        auswahl = getchar();
        while(getchar() != '\n');
        
        switch(auswahl) {
            case '1':
                zeigeSpielmodi();
                scanf("%d", &modus);
                while(getchar() != '\n');
                spieleRunde(&spielerStats, modus);
                break;
            case '2':
                zeigeStatistik(&spielerStats);
                break;
            case '3':
                printf("Spiel wird beendet. Auf Wiedersehen!\n");
                break;
            default:
                printf("Ungültige Eingabe!\n");
        }
    } while(auswahl != '3');
    
    return 0;
}

void spieleRunde(Statistik *stats, Spielmodus modus) {
    switch(modus) {
        case NORMAL:
            spieleNormalModus(stats);
            break;
        case ZEIT:
            spieleZeitModus(stats);
            break;
        case ENDLOS:
            spieleEndlosModus(stats);
            break;
        case MULTIPLAYER:
            spieleMultiplayerModus(stats);
            break;
        default:
            printf("Ungültiger Spielmodus!\n");
    }
}

void spieleNormalModus(Statistik *stats) {
    int zufallsZahl = rand() % 100 + 1;
    int versuch;
    bool gewonnen = false;
    stats->versuche = 0;
    
    printf("\nNORMALER MODUS: Rate eine Zahl zwischen 1 und 100\n");
    
    do {
        versuch = holeBenutzereingabe();
        stats->versuche++;
        
        if(versuch == zufallsZahl) {
            printf("Gratulation! Du hast die Zahl in %d Versuchen erraten!\n", 
                   stats->versuche);
            stats->gewonneneSpiele++;
            gewonnen = true;
        } else if(versuch < zufallsZahl) {
            printf("Die gesuchte Zahl ist größer!\n");
        } else {
            printf("Die gesuchte Zahl ist kleiner!\n");
        }
        
        if(stats->versuche >= 10 && !gewonnen) {
            printf("Leider verloren! Die Zahl war: %d\n", zufallsZahl);
            stats->verloreneSpiele++;
            break;
        }
    } while(!gewonnen);
}

void spieleZeitModus(Statistik *stats) {
    int zufallsZahl = rand() % 100 + 1;
    int versuch;
    bool gewonnen = false;
    time_t startZeit = getZeitInSekunden();
    const int ZEITLIMIT = 30; // 30 Sekunden Zeitlimit
    
    printf("\nZEIT MODUS: Du hast 30 Sekunden Zeit!\n");
    
    do {
        printf("Noch %d Sekunden übrig!\n", 
               ZEITLIMIT - (int)(getZeitInSekunden() - startZeit));
        versuch = holeBenutzereingabe();
        stats->versuche++;
        
        if(versuch == zufallsZahl) {
            printf("Gratulation! Du hast die Zahl in %d Sekunden erraten!\n", 
                   (int)(getZeitInSekunden() - startZeit));
            stats->gewonneneSpiele++;
            gewonnen = true;
        } else if(versuch < zufallsZahl) {
            printf("Die gesuchte Zahl ist größer!\n");
        } else {
            printf("Die gesuchte Zahl ist kleiner!\n");
        }
        
        if(getZeitInSekunden() - startZeit >= ZEITLIMIT && !gewonnen) {
            printf("Zeit abgelaufen! Die Zahl war: %d\n", zufallsZahl);
            stats->verloreneSpiele++;
            break;
        }
    } while(!gewonnen);
}

void spieleEndlosModus(Statistik *stats) {
    int aktuelleRunde = 0;
    int punktzahl = 0;
    
    printf("\nENDLOS MODUS: Rate so viele Zahlen wie möglich!\n");
    
    while(1) {
        int zufallsZahl = rand() % 100 + 1;
        int versuch;
        bool rundeGewonnen = false;
        int rundenVersuche = 0;
        
        aktuelleRunde++;
        printf("\nRunde %d - Deine aktuelle Punktzahl: %d\n", 
               aktuelleRunde, punktzahl);
        
        do {
            versuch = holeBenutzereingabe();
            rundenVersuche++;
            
            if(versuch == zufallsZahl) {
                int rundenpunkte = 10 - rundenVersuche + 1;
                if(rundenpunkte > 0) {
                    punktzahl += rundenpunkte;
                }
                printf("Richtig! +%d Punkte\n", rundenpunkte);
                rundeGewonnen = true;
            } else if(versuch < zufallsZahl) {
                printf("Die gesuchte Zahl ist größer!\n");
            } else {
                printf("Die gesuchte Zahl ist kleiner!\n");
            }
            
            if(rundenVersuche >= 10) {
                printf("Zu viele Versuche! Spiel beendet.\n");
                if(punktzahl > stats->highscore) {
                    stats->highscore = punktzahl;
                    printf("Neuer Highscore: %d!\n", punktzahl);
                }
                return;
            }
        } while(!rundeGewonnen);
    }
}

void spieleMultiplayerModus(Statistik *stats) {
    int zufallsZahl = rand() % 100 + 1;
    int spielerAnzahl;
    int aktuellerSpieler = 1;
    bool gewonnen = false;
    
    printf("\nMULTIPLAYER MODUS\n");
    printf("Anzahl der Spieler (2-4): ");
    scanf("%d", &spielerAnzahl);
    while(getchar() != '\n');
    
    if(spielerAnzahl < 2 || spielerAnzahl > 4) {
        printf("Ungültige Spieleranzahl! Zurück zum Hauptmenü.\n");
        return;
    }
    
    do {
        printf("\nSpieler %d ist an der Reihe\n", aktuellerSpieler);
        int versuch = holeBenutzereingabe();
        
        if(versuch == zufallsZahl) {
            printf("Spieler %d hat gewonnen!\n", aktuellerSpieler);
            stats->gewonneneSpiele++;
            gewonnen = true;
        } else if(versuch < zufallsZahl) {
            printf("Die gesuchte Zahl ist größer!\n");
        } else {
            printf("Die gesuchte Zahl ist kleiner!\n");
        }
        
        aktuellerSpieler = (aktuellerSpieler % spielerAnzahl) + 1;
    } while(!gewonnen);
}

time_t getZeitInSekunden(void) {
    return time(NULL);
}

void zeigeSpielmodi(void) {
    printf("\n=== Spielmodi ===\n");
    printf("1. Normaler Modus\n");
    printf("2. Zeit Modus\n");
    printf("3. Endlos Modus\n");
    printf("4. Multiplayer Modus\n");
    printf("Wähle einen Modus: ");
}

// Die restlichen Funktionen bleiben unverändert
// (spieleInitialisieren, zeigeStatistik, holeBenutzereingabe, zeigeMenu)